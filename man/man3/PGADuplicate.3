.TH PGADuplicate 3 "05/01/95" " " "PGAPack"
.SH NAME
PGADuplicate \- determines if a specified string is a duplicate of one
already in an existing population
.SH INPUT PARAMETERS
.PD 0
.TP
ctx
- context variable
.PD 0
.TP
p
- string index
.PD 0
.TP
pop1
- symbolic constant of the population containing string p
.PD 0
.TP
pop2
- symbolic constant of the (possibly partial) population containing
strings to compare string p against
.PD 1
.SH OUTPUT PARAMETERS
.PD 0
.TP
none

.PD 1
.SH SYNOPSIS
.nf
#include "pgapack.h"
int  PGADuplicate(PGAContext *ctx, int p, int pop1, int pop2)
.fi
.SH LOCATION
duplcate.c
.SH EXAMPLE
.nf
Returns PGA_TRUE if PGAGetNoDuplicatesFlag() returns PGA_TRUE and string
p in population pop1 is a duplicate of at least one strings already
inserted into population pop2.  Otherwise returns PGA_FALSE.

Example:
Check the current to-be-inserted string if it is a copy of any of the
strings in PGA_NEWPOP. Note that the check relies on all individuals in
PGA_NEWPOP to also be inserted into the duplicate hash, see
PGAHashIndividual below.


PGAContext *ctx;
int p;
:
while (PGADuplicate (ctx, p, PGA_NEWNEW, PGA_NEWPOP)) {
    PGAChange (ctx, p, PGA_NEWPOP);
}

.fi
